const normalizeValueToStringArray = (value) => {
    if (value) {
        return Array.isArray(value) ? value : [value];
    }
    return [];
};
// Disable FP rules here to use the performant approach while keep the function itself "FP"
/* eslint-disable @silverhand/fp/no-let, @silverhand/fp/no-mutation */
const repeat = (times, initial, iterate) => {
    let result = initial;
    while (times--) {
        result = iterate(result);
    }
    return result;
};
/* eslint-enable @silverhand/fp/no-let, @silverhand/fp/no-mutation */
const deduplicate = (array) => [...new Set(array)];
/**
 * Deduplicate an array of objects by a specific key.
 *
 * @param array The array of objects to deduplicate.
 * @param key The key to deduplicate by.
 * @example
 * const array = [{ id: 1, name: 'John' }, { id: 2, name: 'Doe' }, { id: 1, name: 'John' }];
 * deduplicateByKey(array, 'id');
 * // Output: [{ id: 1, name: 'John' }, { id: 2, name: 'Doe' }]
 */
const deduplicateByKey = (array, key) => [
    ...new Map(array.map((item) => [item[key], item])).values(),
];

export { deduplicate, deduplicateByKey, normalizeValueToStringArray, repeat };
