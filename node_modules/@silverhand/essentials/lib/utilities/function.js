// Intended
// eslint-disable-next-line @typescript-eslint/no-empty-function
const noop = () => { };
const isPromise = (value) => value !== null &&
    (typeof value === 'object' || typeof value === 'function') &&
    'then' in value &&
    typeof value.then === 'function';
// eslint-disable-next-line @typescript-eslint/promise-function-async
const tryThat = (exec, onError) => {
    const handleError = (error) => {
        if (onError instanceof Error) {
            throw onError;
        }
        return onError(error);
    };
    try {
        const unwrapped = typeof exec === 'function' ? exec() : exec;
        // eslint-disable-next-line promise/prefer-await-to-then
        return isPromise(unwrapped) ? unwrapped.catch(handleError) : unwrapped;
    }
    catch (error) {
        return handleError(error);
    }
};
// eslint-disable-next-line @typescript-eslint/promise-function-async
const trySafe = (exec, onError) => {
    try {
        const unwrapped = typeof exec === 'function' ? exec() : exec;
        return isPromise(unwrapped)
            ? // eslint-disable-next-line promise/prefer-await-to-then
                unwrapped.catch((error) => {
                    onError?.(error);
                })
            : unwrapped;
    }
    catch (error) {
        onError?.(error);
    }
};

export { isPromise, noop, trySafe, tryThat };
