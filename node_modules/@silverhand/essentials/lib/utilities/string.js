function toTitle(string) {
    if (typeof string !== 'string') {
        throw new TypeError('Expected a string');
    }
    return string
        .toLowerCase()
        .replaceAll(/(?:^|\s|-)\S/g, (value) => value.toUpperCase())
        .replaceAll('-', ' ');
}
/**
 * RFC 4648 section 5: base64url (URL- and filename-safe standard)
 * @link https://datatracker.ietf.org/doc/html/rfc4648#section-5
 */
const replaceNonUrlSafeCharacters = (base64String) => base64String.replaceAll('+', '-').replaceAll('/', '_').replaceAll(/=+$/g, '');
const restoreNonUrlSafeCharacters = (base64String) => base64String.replaceAll('-', '+').replaceAll('_', '/');
const urlSafeBase64 = {
    isSafe: (input) => /^[\w-]*$/.test(input),
    encode: (rawString) => {
        const encodedString = btoa(unescape(encodeURIComponent(rawString)));
        return replaceNonUrlSafeCharacters(encodedString);
    },
    decode: (encodedString) => {
        const nonUrlSafeEncodedString = restoreNonUrlSafeCharacters(encodedString);
        return decodeURIComponent(escape(atob(nonUrlSafeEncodedString)));
    },
    replaceNonUrlSafeCharacters,
    restoreNonUrlSafeCharacters,
};
const yes = (value) => 
// eslint-disable-next-line no-implicit-coercion
!!value && ['1', 'true', 'y', 'yes', 'yep', 'yeah'].includes(value.toLowerCase());

export { toTitle, urlSafeBase64, yes };
