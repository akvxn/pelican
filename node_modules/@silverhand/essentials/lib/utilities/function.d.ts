export declare const noop: () => void;
export declare const isPromise: (value: unknown) => value is Promise<unknown>;
export type TryThat = {
    <T>(exec: () => T, onError: Error | ((error: unknown) => never)): T;
    <T>(exec: Promise<T> | (() => Promise<T>), onError: Error | ((error: unknown) => never)): Promise<T>;
};
export declare const tryThat: TryThat;
export type TrySafe = {
    <T>(exec: Promise<T> | (() => Promise<T>), onError?: (error: unknown) => void): Promise<T | undefined>;
    <T>(exec: () => T, onError?: (error: unknown) => void): T | undefined;
};
export declare const trySafe: TrySafe;
