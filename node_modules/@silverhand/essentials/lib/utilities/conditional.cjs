'use strict';

var assertions = require('./assertions.cjs');

const nullable = (exp) => (assertions.notFalsy(exp) ? exp : null);
/**
 * Conditional return the expression result when it's not {@link Falsy};
 * otherwise return `undefined`.
 *
 * @example
 * ```ts
 * conditional(1 && '2') // '2'
 * conditional(false && '1') // undefined
 * ```
 */
const conditional = (exp) => (assertions.notFalsy(exp) ? exp : undefined);
/** Alias for {@link conditional}. */
const cond = conditional;
/**
 * Conditional return the stringified expression result (using `String`) when it's not {@link Falsy};
 * otherwise return an empty string.
 *
 * @example
 * ```ts
 * conditionalString(1 && 2) // '2'
 * conditionalString(false && '1') // ''
 * ```
 */
const conditionalString = (exp) => (assertions.notFalsy(exp) ? String(exp) : '');
/** Alias for {@link conditionalString}. */
const condString = conditionalString;
/**
 * Conditional concat multiple expression results into a array by filtering all {@link Falsy} results
 * and flatten 1 level deep if the expression result is an array.
 *
 * @example
 * ```ts
 * conditionalArray(1, [2, 3]) // [1, 2, 3]
 * ```
 */
const conditionalArray = (...exps) => exps.filter((value) => assertions.notFalsy(value)).flat();
/** Alias for {@link conditionalArray}. */
const condArray = conditionalArray;
/**
 * Return a new object with all {@link Falsy} values removed.
 * This function only performs a shallow removal, i.e. it does not remove
 * {@link Falsy} values nested in objects.
 *
 * @example
 * ```ts
 * conditionalObject({
 *   foo: 'foo',
 *   bar: undefined,
 *   baz: false,
 * }) // { foo: 'foo' }
 * ```
 */
const conditionalObject = (object) => 
// eslint-disable-next-line no-restricted-syntax
Object.fromEntries(Object.entries(object).filter(([, value]) => assertions.notFalsy(value)));
/** Alias for {@link conditionalObject}. */
const condObject = conditionalObject;

exports.cond = cond;
exports.condArray = condArray;
exports.condObject = condObject;
exports.condString = condString;
exports.conditional = conditional;
exports.conditionalArray = conditionalArray;
exports.conditionalObject = conditionalObject;
exports.conditionalString = conditionalString;
exports.nullable = nullable;
