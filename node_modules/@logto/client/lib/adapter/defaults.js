import { LogtoError } from '@logto/js';
import { createRemoteJWKSet, jwtVerify } from 'jose';

const defaultClockTolerance = 300; // 5 minutes
const verifyIdToken = async (idToken, clientId, issuer, jwks, clockTolerance = defaultClockTolerance) => {
    const result = await jwtVerify(idToken, jwks, { audience: clientId, issuer, clockTolerance });
    if (Math.abs((result.payload.iat ?? 0) - Date.now() / 1000) > clockTolerance) {
        throw new LogtoError('id_token.invalid_iat');
    }
};
class DefaultJwtVerifier {
    constructor(client, clockTolerance = defaultClockTolerance) {
        this.client = client;
        this.clockTolerance = clockTolerance;
    }
    async verifyIdToken(idToken) {
        const { appId } = this.client.logtoConfig;
        const { issuer, jwksUri } = await this.client.getOidcConfig();
        this.getJwtVerifyGetKey ||= createRemoteJWKSet(new URL(jwksUri));
        await verifyIdToken(idToken, appId, issuer, this.getJwtVerifyGetKey, this.clockTolerance);
    }
}

export { DefaultJwtVerifier, defaultClockTolerance, verifyIdToken };
