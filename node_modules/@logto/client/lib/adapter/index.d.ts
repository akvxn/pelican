import { type Requester } from '@logto/js';
import { type Nullable } from '@silverhand/essentials';
import { type CacheKey, type Navigate, type PersistKey, type Storage, type StorageKey, type ClientAdapter, type InferStorageKey } from './types.js';
export declare class ClientAdapterInstance implements ClientAdapter {
    requester: Requester;
    storage: Storage<StorageKey | PersistKey>;
    unstable_cache?: Storage<CacheKey> | undefined;
    navigate: Navigate;
    generateState: () => string | Promise<string>;
    generateCodeVerifier: () => string | Promise<string>;
    generateCodeChallenge: (codeVerifier: string) => string | Promise<string>;
    constructor(adapter: ClientAdapter);
    setStorageItem(key: InferStorageKey<typeof this.storage>, value: Nullable<string>): Promise<void>;
    /**
     * Try to get the string value from the cache and parse as JSON.
     * Return the parsed value if it is an object, return `undefined` otherwise.
     *
     * @param key The cache key to get value from.
     */
    getCachedObject<T>(key: CacheKey): Promise<T | undefined>;
    /**
     * Try to get the value from the cache first, if it doesn't exist in cache,
     * run the getter function and store the result into cache.
     *
     * @param key The cache key to get value from.
     */
    getWithCache<T>(key: CacheKey, getter: () => Promise<T>): Promise<T>;
}
export * from './types.js';
