import BaseClient, { createRequester } from '@logto/client';
export { default as BaseClient, LogtoClientError, LogtoError, LogtoRequestError, OidcError, PersistKey, Prompt, ReservedResource, ReservedScope, UserScope, buildOrganizationUrn, createRequester, getOrganizationIdFromUrn, isLogtoRequestError, organizationUrnPrefix } from '@logto/client';
import { conditional } from '@silverhand/essentials';
import { CacheStorage } from './cache.js';
import { BrowserStorage } from './storage.js';
import { generateCodeChallenge, generateCodeVerifier, generateState } from './utils/generators.js';

const navigate = (url) => {
    window.location.assign(url);
};
class LogtoClient extends BaseClient {
    /**
     * @param config The configuration object for the client.
     * @param [unstable_enableCache=false] Whether to enable cache for well-known data.
     * Use sessionStorage by default.
     */
    constructor(config, unstable_enableCache = false) {
        const requester = createRequester(fetch);
        super(config, {
            requester,
            navigate,
            storage: new BrowserStorage(config.appId),
            unstable_cache: conditional(unstable_enableCache && new CacheStorage(config.appId)),
            generateCodeChallenge,
            generateCodeVerifier,
            generateState,
        });
    }
}

export { BrowserStorage, LogtoClient as default, generateCodeChallenge, generateCodeVerifier, generateState };
