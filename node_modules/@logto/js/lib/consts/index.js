export { ReservedResource, ReservedScope, UserScope, buildOrganizationUrn, getOrganizationIdFromUrn, idTokenClaims, organizationUrnPrefix, userClaims, userinfoClaims } from './openid.js';

const ContentType = {
    formUrlEncoded: { 'Content-Type': 'application/x-www-form-urlencoded' },
};
var TokenGrantType;
(function (TokenGrantType) {
    TokenGrantType["AuthorizationCode"] = "authorization_code";
    TokenGrantType["RefreshToken"] = "refresh_token";
})(TokenGrantType || (TokenGrantType = {}));
var QueryKey;
(function (QueryKey) {
    QueryKey["ClientId"] = "client_id";
    QueryKey["Code"] = "code";
    QueryKey["CodeChallenge"] = "code_challenge";
    QueryKey["CodeChallengeMethod"] = "code_challenge_method";
    QueryKey["CodeVerifier"] = "code_verifier";
    QueryKey["Error"] = "error";
    QueryKey["ErrorDescription"] = "error_description";
    QueryKey["GrantType"] = "grant_type";
    QueryKey["IdToken"] = "id_token";
    QueryKey["IdTokenHint"] = "id_token_hint";
    QueryKey["LoginHint"] = "login_hint";
    QueryKey["PostLogoutRedirectUri"] = "post_logout_redirect_uri";
    QueryKey["Prompt"] = "prompt";
    QueryKey["RedirectUri"] = "redirect_uri";
    QueryKey["RefreshToken"] = "refresh_token";
    QueryKey["Resource"] = "resource";
    QueryKey["ResponseType"] = "response_type";
    QueryKey["Scope"] = "scope";
    QueryKey["State"] = "state";
    /** @deprecated */
    QueryKey["Token"] = "token";
    /** Need to align with the OIDC extraParams settings in core */
    QueryKey["InteractionMode"] = "interaction_mode";
    /** The query key for specifying the organization ID. */
    QueryKey["OrganizationId"] = "organization_id";
    QueryKey["FirstScreen"] = "first_screen";
    QueryKey["Identifier"] = "identifier";
    QueryKey["DirectSignIn"] = "direct_sign_in";
    /** @experimental This might change in future development. Please use with caution. */
    QueryKey["OneTimeToken"] = "one_time_token";
})(QueryKey || (QueryKey = {}));
/** The prompt parameter to be used for the authorization request. */
var Prompt;
(function (Prompt) {
    Prompt["None"] = "none";
    /**
     * The Authorization Server MUST prompt the End-User for consent
     * before returning information to the Client.
     */
    Prompt["Consent"] = "consent";
    /**
     * The Authorization Server MUST prompt the End-User for re-authentication,
     * forcing the user to log in again. Note the there'll be no Refresh Token
     * returned in this case.
     */
    Prompt["Login"] = "login";
})(Prompt || (Prompt = {}));

export { ContentType, Prompt, QueryKey, TokenGrantType };
