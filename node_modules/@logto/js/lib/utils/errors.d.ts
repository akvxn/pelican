declare const logtoErrorCodes: Readonly<{
    'id_token.invalid_iat': "Invalid issued at time in the ID token";
    'id_token.invalid_token': "Invalid ID token";
    'callback_uri_verification.redirect_uri_mismatched': "The callback URI mismatches the redirect URI.";
    'callback_uri_verification.error_found': "Error found in the callback URI";
    'callback_uri_verification.missing_state': "Missing state in the callback URI";
    'callback_uri_verification.state_mismatched': "State mismatched in the callback URI";
    'callback_uri_verification.missing_code': "Missing code in the callback URI";
    crypto_subtle_unavailable: "Crypto.subtle is unavailable in insecure contexts (non-HTTPS).";
    unexpected_response_error: "Unexpected response error from the server.";
}>;
export type LogtoErrorCode = keyof typeof logtoErrorCodes;
export declare class LogtoError extends Error {
    code: LogtoErrorCode;
    data?: unknown;
    name: string;
    constructor(code: LogtoErrorCode, data?: unknown);
}
export declare const isLogtoRequestError: (data: unknown) => data is LogtoRequestError;
export declare const isLogtoRequestErrorJson: (data: unknown) => data is {
    code: string;
    message: string;
};
export declare class LogtoRequestError extends Error {
    code: string;
    /** The original response object from the server. */
    cause?: Response | undefined;
    name: string;
    constructor(code: string, message: string, 
    /** The original response object from the server. */
    cause?: Response | undefined);
}
export declare class OidcError {
    error: string;
    errorDescription?: string | undefined;
    name: string;
    constructor(error: string, errorDescription?: string | undefined);
}
export {};
