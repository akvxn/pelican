import { QueryKey, Prompt } from '../consts/index.js';
import { withReservedScopes } from '../utils/scopes.js';

const codeChallengeMethod = 'S256';
const responseType = 'code';
const buildPrompt = (prompt) => {
    if (Array.isArray(prompt)) {
        return prompt.join(' ');
    }
    return prompt ?? Prompt.Consent;
};
// eslint-disable-next-line complexity
const generateSignInUri = ({ authorizationEndpoint, clientId, redirectUri, codeChallenge, state, scopes, resources, prompt, firstScreen, identifiers: identifier, interactionMode, loginHint, directSignIn, oneTimeToken, extraParams, includeReservedScopes = true, }) => {
    const urlSearchParameters = new URLSearchParams({
        [QueryKey.ClientId]: clientId,
        [QueryKey.RedirectUri]: redirectUri,
        [QueryKey.CodeChallenge]: codeChallenge,
        [QueryKey.CodeChallengeMethod]: codeChallengeMethod,
        [QueryKey.State]: state,
        [QueryKey.ResponseType]: responseType,
        [QueryKey.Prompt]: buildPrompt(prompt),
    });
    const computedScopes = includeReservedScopes ? withReservedScopes(scopes) : scopes?.join(' ');
    if (computedScopes) {
        urlSearchParameters.append(QueryKey.Scope, computedScopes);
    }
    if (loginHint) {
        urlSearchParameters.append(QueryKey.LoginHint, loginHint);
    }
    if (directSignIn) {
        urlSearchParameters.append(QueryKey.DirectSignIn, `${directSignIn.method}:${directSignIn.target}`);
    }
    for (const resource of resources ?? []) {
        urlSearchParameters.append(QueryKey.Resource, resource);
    }
    if (firstScreen) {
        urlSearchParameters.append(QueryKey.FirstScreen, firstScreen);
    }
    // @deprecated Remove later
    else if (interactionMode) {
        urlSearchParameters.append(QueryKey.InteractionMode, interactionMode);
    }
    if (identifier && identifier.length > 0) {
        urlSearchParameters.append(QueryKey.Identifier, identifier.join(' '));
    }
    if (oneTimeToken) {
        urlSearchParameters.append(QueryKey.OneTimeToken, oneTimeToken);
    }
    if (extraParams) {
        for (const [key, value] of Object.entries(extraParams)) {
            urlSearchParameters.append(key, value);
        }
    }
    return `${authorizationEndpoint}?${urlSearchParameters.toString()}`;
};

export { generateSignInUri };
